{"version":3,"file":"static/js/736.2a90a0a3.chunk.js","mappings":"0QAEaA,EAAOC,EAAAA,EAAAA,GAAH,wIASJC,EAAKD,EAAAA,EAAAA,GAAH,oS,SCPTE,EAAQC,EAAQ,MAiCtB,EA/Ba,WAET,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAER,IAAOC,EAAQ,mCAAG,6GAEeR,EAAMS,IAAN,6CAAgDP,EAAhD,sDAFf,cAEFQ,EAFE,gBAGFJ,EAASI,EAASC,KAAKC,MAHrB,uDAMRC,QAAQC,IAAR,MANQ,yDAAH,qDAUbN,GACH,GAAE,CAACN,KAGA,SAACL,EAAD,UACMQ,EAAMU,KAAI,gBAAEC,EAAF,EAAEA,KAAKC,EAAP,EAAOA,GAAGC,EAAV,EAAUA,UAAWC,EAArB,EAAqBA,aAAcC,EAAnC,EAAmCA,cAAnC,OAAqD,UAACrB,EAAD,WAC3DoB,GAAe,gBAAKE,IAAG,yCAAoCF,GAAgBG,IAAKN,KAAU,gBAAKK,IAAK,uCAAwCC,IAAKN,KACnJ,8BAAIA,QAAJ,IAAIA,EAAAA,EAAMI,KACV,0BAAG,uCAAmBF,OAHgDD,EAA9D,KAOvB,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\npadding:0 15px;\ndisplay: flex;\nlist-style: none;\njustify-content: center;\nmargin: -15px;\nflex-wrap: wrap;\n`;\n\nexport const Li = styled.li`\nmargin: 15px;\nwidth: calc((100% - 120px)/4);\n\n@media screen and  (max-width: 760px){\n    width: calc((100% - 90px)/3);\n    }\n\n    @media screen and  (max-width: 460px){\n    width: calc((100% - 60px)/2);\n    }\n\nimg{\n    width:100%;\n    height: auto;\n}\n\n`;","import { useParams, } from 'react-router-dom';\nimport { useState, useEffect, } from 'react';\nimport { Li, List } from './Cast.styled';\n\nconst axios = require('axios');\n\nconst Cast = () => {\n      \n    const { movieId } = useParams();\n    const [actor, setActor] = useState([]);\n           \n    useEffect(() => {\n    \n      const  getActor = async () => {\n            try {\n                const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=5b6b31e1fe12fe8c46151504ff095a5b`);\n                await setActor(response.data.cast);\n                \n            } catch (error) {\n                console.log(error);\n             }\n               \n        }\n        getActor();\n    }, [movieId]);\n\n    return (\n        <List>\n            { actor.map(({name,id,character, profile_path, original_name})=> <Li key={id}>\n                { profile_path ? <img src={`https://image.tmdb.org/t/p/w500${profile_path}`} alt={name} />: <img src={'https://outlinetts.com/no_image.webp'} alt={name} />}\n                <p>{name??original_name}</p>\n                <p><b>Character: </b>{character}</p>\n            </Li>)}\n        </List>\n    );\n} \n\nexport default Cast;"],"names":["List","styled","Li","axios","require","movieId","useParams","useState","actor","setActor","useEffect","getActor","get","response","data","cast","console","log","map","name","id","character","profile_path","original_name","src","alt"],"sourceRoot":""}